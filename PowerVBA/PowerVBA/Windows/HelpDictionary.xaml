<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:PowerVBA.Windows"
                    xmlns:av="clr-namespace:PowerVBA.Core.AvalonEdit;assembly=PowerVBA.Core"
                    xmlns:c="clr-namespace:PowerVBA.Controls.Customize">

    <!--#region [  기본 도움말  ]-->
    <Grid x:Key="BasicHelp">
        <StackPanel>
            <TextBlock Text="기본 도움말" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 여러분이 PowerVBA를 효율적으로 사용할 수 있도록 PowerVBA의 기능에 대해서 정리해두었습니다.
                왼쪽의 메뉴를 통해 원하시는 메뉴를 검색하시거나 클릭해 내용을 숙지하시기 바랍니다.
                <LineBreak/><LineBreak/>
                다음의 메뉴들로 기본적인 정보들로 바로 이동할 수 있습니다.
            </TextBlock>
            <WrapPanel Margin="0,20,0,0">
                <c:ImageButton Width="120" BackImage="/PowerVBA;component/Resources/Icon/ClassIcon.png" Content="컴포넌트 (구성 요소)&#x0a;추가/제거" Tag="ComponentHelp"/>
                <c:ImageButton Width="120" BackImage="/PowerVBA;component/Resources/Icon/ReferenceIcon.png" Content="참조&#x0a;추가/제거" Tag="ReferenceHelp"/>
                <c:ImageButton Width="120" BackImage="/PowerVBA;component/Resources/Icon/MethodIcon.png" Content="기본 함수&#x0a;선언" Tag="FunctionHelp"/>
                <c:ImageButton Width="120" BackImage="/PowerVBA;component/Resources/Icon/DeclaratorIcon.png" Content="조건문" Tag="ConditionalHelp"/>
                <Image/>
            </WrapPanel>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  컴포넌트 추가 / 제거 도움말  ]-->
    <Grid x:Key="ComponentHelp">
        <StackPanel>
            <TextBlock Text="컴포넌트 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 PowerVBA 내에서 컴포넌트를 추가하고 제거하는 방법에 대해서 설명합니다.
                해당 내용을 숙지하시면 클래스/모듈/사용자 폼 파일을 추가하거나 제거 하실 수 있습니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="컴포넌트 추가" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 파트에서는 컴포넌트를 추가하는 방법에 대해서 설명합니다. 우선, 컴포넌트를 추가하기 위해서는 두가지의 방법이 있습니다.
                <LineBreak/>
                1. <Run Text="Control(컨트롤 키) + Shift(쉬프트 키) + A 버튼을 동시에 누른다. (모듈 추가)" FontWeight="Bold"/>
                <LineBreak/>
                2. 메인 탭에서 <Run Text="[삽입] 탭" FontWeight="Bold"/>의 <Run Text="[클래스 추가]" FontWeight="Bold"/> 또는
                <Run Text="[모듈 추가]" FontWeight="Bold"/> 또는 <Run Text="[사용자 폼 추가]" FontWeight="Bold"/>을 통해 추가하실 수 있습니다.
                <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/ComponentHelp1.jpg" Width="200"/>
                <LineBreak/>
                <Run Text="▲ 다음의 메뉴중에서 하나를 선택한다."/>
                <LineBreak/>
                <LineBreak/>
                그럼 다음과 같은 화면을 보실 수 있습니다.
                <LineBreak/>
                <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/Module1.jpg" Width="500"/>
                <LineBreak/>
                다음 화면에서 클래스 / 모듈 / 유저폼을 선택할 수 있으며 이름을 입력하신 뒤 확인 버튼으로 생성하실 수 있습니다.
                <LineBreak/>
                파일 이름은 명명 규칙을 따라야 합니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="명명 규칙" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                자세한 내용은 <Hyperlink TargetName="NamingHelp">명명 규칙</Hyperlink> 도움말 에서 확인하세요.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="컴포넌트 제거" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 파트에서는 컴포넌트를 제거하는 방법에 대해서 설명합니다.
                <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/ComponentHelp1.jpg" Width="200"/>
                <LineBreak/>
                <Run Text="▲ 다음의 메뉴중에서 하나를 선택한다."/>
                <LineBreak/>
                <LineBreak/>
                다음 화면에서 클래스 / 모듈 / 유저폼을 선택할 수 있으며 이름을 입력하신 뒤 확인 버튼으로 생성하실 수 있습니다.
                <LineBreak/>
                파일 이름은 명명 규칙을 따라야 합니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--region [  명명 규칙 도움말  ]-->
    <Grid x:Key="NamingHelp">
        <StackPanel>
            <TextBlock Text="명명 규칙" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 컴포넌트의 이름과 같은 명명 규칙에 대해서 설명합니다. 해당 명명 규칙을 어겼을시에는 정상적인 파일 생성이 불가능합니다.
            </TextBlock>

            <TextBlock Margin="0,30,0,0" Text="컴포넌트 명명 규칙" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                컴포넌트 명명 규칙입니다. 일반 변수 명명 규칙이랑 차이가 존재합니다.
                <LineBreak/>
                <LineBreak/>
                1. <Run Text="첫글자 _(언더바), 숫자 사용 불가능"/>
                <LineBreak/>
                2. <Run Text="대소문자 구분 없음 (Star와 STAR은 동일하게 인식)"/>
                <LineBreak/>
                3. <Run Text="한글, 영어, 숫자, _(언더바)만 사용가능."/>
                <LineBreak/><LineBreak/>
                변수 이름 명명 규칙과의 차이점은 첫글자에 언더바가 올 수 없다는 점입니다.
                따라서 '_FileName'와 같이 작성 할 수 없습니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="변수 이름 명명 규칙" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                변수 명명 규칙입니다.
                <LineBreak/>
                <LineBreak/>
                1. <Run Text="대소문자 구분 없음 (Star와 STAR은 동일하게 인식)"/>
                <LineBreak/>
                2. <Run Text="한글, 영어, 숫자, _(언더바)만 사용가능. (첫글자에도 동일하게 적용)"/>                
                <LineBreak/><LineBreak/>
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  참조 도움말  ]-->
    <Grid x:Key="ReferenceHelp">
        <StackPanel>
            <TextBlock Text="참조 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 PowerVBA에서의 참조에 대해서 설명합니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="참조 추가" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                참조를 추가 하기 위해서는 다음의 방법을 사용 합니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  기본 함수 추가/제거  ]-->
    <Grid x:Key="FunctionHelp">
        <StackPanel>
            <TextBlock Text="기본 함수 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 함수를 선언하고자 할때 사용합니다.
                함수는 값을 반환하는 함수, 값을 반환하지 않는 함수로 나뉘며
                값을 반환하는 함수는 반환할 형식을 지정해주어야 합니다. 반환할 기본 타입으로는 다음과 같은 형식이 있습니다.
                <LineBreak/><LineBreak/>
                - <Run Text="String" FontWeight="Bold"/> (문자열)<LineBreak/>
                - <Run Text="Boolean" FontWeight="Bold"/> (참 혹은 거짓)<LineBreak/>
                - <Run Text="Integer" FontWeight="Bold"/> (정수)<LineBreak/>
                - <Run Text="Object" FontWeight="Bold"/> (모든 형식을 담을 수 있음)<LineBreak/>
                - <Run Text="Variant" FontWeight="Bold"/> (모든 형식을 담을 수 있음)<LineBreak/>
                <LineBreak/>
                자세한 내용은 <Hyperlink TargetName="TypeHelp">VBA 형식</Hyperlink> 도움말 에서 확인하세요.
            </TextBlock>

            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                반환하지 않는 함수 선언의 기본은 다음과 같습니다.
            </TextBlock>
            <av:CodeEditor Margin="0,10" Text="Public Sub Name()&#x0a;&#x0a;End Sub" IsHitTestVisible="False" 
                           ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto"></av:CodeEditor>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                반환하는 함수 선언의 기본은 다음과 같습니다.
            </TextBlock>
            <av:CodeEditor Margin="0,10" Text="Public Function Name() As ReturnType&#x0a;&#x0a;End Function" IsHitTestVisible="False" 
                           ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto"></av:CodeEditor>

            <TextBlock TextWrapping="Wrap">
                다음은 반환하는 방법에 대해서 설명합니다. 반환은 기본적으로 <Run Text="함수이름 = 반환할 값" FontWeight="Bold"/>으로 반환합니다.
                VB.NET에서는 Return 키워드로 반환하지만 이곳에서의 Return은 다른 의미로 사용됩니다.
                <LineBreak/><LineBreak/>
            </TextBlock>

            <TextBlock>
                다음은 반환 예시입니다.
            </TextBlock>

<!--Public Function GetName(ByVal i As Integer) As String
    If i = 1 Then
        GetName = "홍길동"
    ElseIf i = 2 Then
        GetName = "임꺽정"
    Else
        GetName = "알 수 없음"
    End If
End Function

Public Sub ShowName()
    MsgBox "저의 이름은 " & GetName(1) & " 입니다."
End Sub-->

            <av:CodeEditor Margin="0,10" Text="Public Function GetName(ByVal i As Integer) As String&#x0a;    If i = 1 Then&#x0a;        GetName = &quot;홍길동&quot;&#x0a;    ElseIf i = 2 Then&#x0a;        GetName = &quot;임꺽정&quot;&#x0a;    Else&#x0a;        GetName = &quot;알 수 없음&quot;&#x0a;    End If&#x0a;End Function&#x0a;&#x0a;Public Sub ShowName()&#x0a;    MsgBox &quot;저의 이름은 &quot; &amp; GetName(1) &amp; &quot; 입니다.&quot;&#x0a;End Sub" 
                           IsHitTestVisible="False" 
                           ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto"></av:CodeEditor>

            <TextBlock>
                다음은 실행 결과 입니다.
            </TextBlock>

            <Grid Margin="0,10,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBlock Text="실행 결과 >>" FontWeight="Bold" Margin="0,0,0,5"/>
                <Rectangle Grid.Row="1" Fill="LightGray" Stroke="Black"/>
                <TextBlock Grid.Row="1" Margin="10">
                    저의 이름은 홍길동 입니다.
                </TextBlock>
            </Grid>

        </StackPanel>

    </Grid>
    <!--#endregion-->

    <!--#region [  형식 설명  ]-->
    <Grid x:Key="TypeHelp">
        <StackPanel>
            <TextBlock Text="VBA 형식" FontSize="20"/>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  조건문 설명  ]-->

    <Grid x:Key="ConditionalHelp">
        <StackPanel>
            <TextBlock Text="조건문" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                다음 도움말은 조건문에 대해서 설명합니다.
                <LineBreak/><LineBreak/>
                VBA에는 여러가지의 조건문이 있습니다. 다음은 조건문의 종류입니다.
                <LineBreak/><LineBreak/>
                - <Hyperlink TargetName="IfHelp">If (VBA)</Hyperlink> 문<LineBreak/>
                - <Hyperlink TargetName="SelectHelp">Select (VBA)</Hyperlink> 문<LineBreak/>
                - <Hyperlink TargetName="SelectHelp">Do While (VBA)</Hyperlink> 문<LineBreak/>
                - <Hyperlink TargetName="SelectHelp">Do Until (VBA)</Hyperlink> 문<LineBreak/>
                - <Hyperlink TargetName="SelectHelp">While (VBA)</Hyperlink> 문<LineBreak/>    
            </TextBlock>
            
            <TextBlock Text="조건식" FontSize="20"/>
            
            <c:ExampleBox Text="A" Title="예시"/>

            <TextBlock Margin="0,10,0,0">
                <LineBreak/>
                모든 조건문은 조건식을 사용하여 처리합니다. 조건식은 참 또는 거짓으로 나타낼 수 있어야 합니다.
                <LineBreak/><LineBreak/>
                예를 들어 다음과 같은 식은 조건식으로 사용 할 수 없습니다.
                <LineBreak/>
                "A"는 문자열로 참과 거짓을 나타낼 수 없습니다. 따라서 조건식으로 사용 할 수 없습니다.
                <LineBreak/><LineBreak/>
                반면에 다음과 같은 식은 조건식으로 사용 할 수 있습니다.
            </TextBlock>

            <c:ExampleBox Text="True" Title="예시"/>

            <TextBlock Margin="0,10,0,0">
                True는 Boolean (부울) 형태에서 참을 나타내는 값입니다. 따라서 True는 조건식으로 사용 할 수 있습니다.
                <LineBreak/><LineBreak/>
                다음과 같은 식도 사용이 가능합니다.
            </TextBlock>
            <c:ExampleBox Text="&quot;A&quot; = &quot;B&quot;" Title="예시"/>

            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                의미는 A라는 문자와 B라는 문자가 서로 같을 경우 라는 조건문인데 같으면 True를 같지 않으면 False를 반환하는데 같지 않으므로 False를 반환합니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->
    
    
    
    
</ResourceDictionary>
