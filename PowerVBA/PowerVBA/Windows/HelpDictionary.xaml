<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:PowerVBA.Windows"
                    xmlns:av="clr-namespace:PowerVBA.Core.AvalonEdit;assembly=PowerVBA.Core"
                    xmlns:c="clr-namespace:PowerVBA.Controls.Customize">
    
    <!--#region [  첫 도움말  ]-->
    <Grid x:Key="FirstHelp">
        <StackPanel>
            <TextBlock Text="첫 도움말" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 [도움말] 기능은 여러분이 PowerVBA를 효율적으로 사용할 수 있도록 PowerVBA의 기능에 대해서 정리해두었습니다.<LineBreak/>
                왼쪽의 메뉴를 통해 원하시는 메뉴를 검색하시거나 클릭해 내용을 숙지하시기 바랍니다.<LineBreak/>
                단, 문법에 대해서 자세히 다루지 않으니 문법은 MSDN에서 확인하시기 바랍니다.
                <LineBreak/><LineBreak/>
                다음의 메뉴들로 기본 도움말들로 바로 이동할 수 있습니다.
            </TextBlock>
            <WrapPanel Margin="0,20,0,0">
                <c:ImageButton Content="기본 도움말" 
                               Tag="BasicHelp"
                               BackImage="/PowerVBA;component/Resources/Icon/HelpIcon.png"
                               Width="120"/>
                <c:ImageButton Content="프로젝트 참조&#x0a;추가/제거하기" 
                               Tag="ReferenceHelp"
                               BackImage="/PowerVBA;component/Resources/Icon/ReferenceIcon.png" 
                               Width="120"/>
                <c:ImageButton Content="기본 함수&#x0a;선언" 
                               Tag="FunctionHelp"
                               BackImage="/PowerVBA;component/Resources/Icon/MethodIcon.png" 
                               Width="120"/>
                <c:ImageButton Content="코드 에디터&#x0a;기능 목록" 
                               Tag="CodeEditorHelp"
                               BackImage="/PowerVBA;component/Resources/Icon/DeclaratorIcon.png" 
                               Width="120"/>
            </WrapPanel>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    
    <!--#region [  기초 도움말  ]-->

    <Grid x:Key="BasicHelp">

        <StackPanel>
            <TextBlock Text="기초 도움말" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                PowerVBA의 기초적인 내용을 다룹니다. 다음 버튼으로 바로 이동 할 수 있습니다.
            </TextBlock>
            <WrapPanel Margin="0,20,0,0">
                <c:ImageButton Content="컴포넌트 (파일)&#x0a;추가/제거" 
                               Tag="ComponentHelp" 
                               BackImage="/PowerVBA;component/Resources/Icon/ClassIcon.png" 
                               Width="120"/>
                
                <c:ImageButton Content="참조&#x0a;추가/제거" 
                               Tag="ReferenceHelp" 
                               BackImage="/PowerVBA;component/Resources/Icon/ReferenceIcon.png" 
                               Width="120"/>
                
                <c:ImageButton Content="기본 함수&#x0a;선언" 
                               Tag="FunctionHelp" 
                               BackImage="/PowerVBA;component/Resources/Icon/MethodIcon.png" 
                               Width="120"/>

                <c:ImageButton Content="코드 에디터&#x0a;기능 목록" 
                               Tag="CodeEditorHelp" 
                               BackImage="/PowerVBA;component/Resources/Icon/DeclaratorIcon.png" 
                               Width="120"/>

                <c:ImageButton Content="PowerPoint와의&#x0a;차이점" 
                               Tag="PPTDiffHelp" 
                               BackImage="/PowerVBA;component/Resources/Icon/PPTIcon.png" 
                               Width="120"/>
            </WrapPanel>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->
    
    
    <!--#region [  컴포넌트 추가 / 제거 도움말  ]-->
    <Grid x:Key="ComponentHelp">
        <StackPanel>
            <TextBlock Text="컴포넌트 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 PowerVBA 내에서 컴포넌트를 추가하고 제거하는 방법에 대해서 설명합니다.
                해당 내용을 숙지하시면 클래스/모듈/사용자 폼 파일을 추가하거나 제거 하실 수 있습니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="컴포넌트 추가" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 파트에서는 컴포넌트를 추가하는 방법에 대해서 설명합니다. 우선, 컴포넌트를 추가하기 위해서는 두가지의 방법이 있습니다.
                <LineBreak/>
                1. <Run Text="Control(컨트롤 키) + Shift(쉬프트 키) + A 버튼을 동시에 누른다. (모듈 추가)" FontWeight="Bold"/>
                <LineBreak/>
                2. 메인 탭에서 <Run Text="[삽입] 탭" FontWeight="Bold"/>의 <Run Text="[클래스 추가]" FontWeight="Bold"/> 또는
                <Run Text="[모듈 추가]" FontWeight="Bold"/> 또는 <Run Text="[사용자 폼 추가]" FontWeight="Bold"/>을 통해 추가하실 수 있습니다.
                <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/ComponentHelp1.jpg" Width="200"/>
                <LineBreak/>
                <Run Text="▲ 다음의 메뉴중에서 하나를 선택한다."/>
                <LineBreak/>
                <LineBreak/>
                그럼 다음과 같은 화면을 보실 수 있습니다.
                <LineBreak/>
                <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/Module1.jpg" Width="500"/>
                <LineBreak/>
                다음 화면에서 클래스 / 모듈 / 유저폼을 선택할 수 있으며 이름을 입력하신 뒤 확인 버튼으로 생성하실 수 있습니다.
                <LineBreak/>
                파일 이름은 명명 규칙을 따라야 합니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="명명 규칙" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                자세한 내용은 <Hyperlink TargetName="NamingHelp">명명 규칙</Hyperlink> 도움말 에서 확인하세요.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="컴포넌트 제거" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 파트에서는 컴포넌트를 제거하는 방법에 대해서 설명합니다.
                <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/ComponentHelp1.jpg" Width="200"/>
                <LineBreak/>
                <Run Text="▲ 다음의 메뉴중에서 하나를 선택한다."/>
                <LineBreak/>
                <LineBreak/>
                다음 화면에서 클래스 / 모듈 / 유저폼을 선택할 수 있으며 이름을 입력하신 뒤 확인 버튼으로 생성하실 수 있습니다.
                <LineBreak/>
                파일 이름은 명명 규칙을 따라야 합니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--region [  명명 규칙 도움말  ]-->
    <Grid x:Key="NamingHelp">
        <StackPanel>
            <TextBlock Text="명명 규칙" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 컴포넌트의 이름과 같은 명명 규칙에 대해서 설명합니다. 해당 명명 규칙을 어겼을시에는 정상적인 파일 생성이 불가능합니다.
            </TextBlock>

            <TextBlock Margin="0,30,0,0" Text="컴포넌트 명명 규칙" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                컴포넌트 명명 규칙입니다. 일반 변수 명명 규칙이랑 차이가 존재합니다.
                <LineBreak/>
                <LineBreak/>
                1. <Run Text="첫글자 _(언더바), 숫자 사용 불가능"/>
                <LineBreak/>
                2. <Run Text="대소문자 구분 없음 (Variable와 VARIABLE은 동일하게 인식)"/>
                <LineBreak/>
                3. <Run Text="한글, 영어, 숫자, _(언더바)만 사용가능."/>
                <LineBreak/><LineBreak/>
                변수 이름 명명 규칙과의 차이점은 첫글자에 언더바가 올 수 없다는 점입니다.
                따라서 '_FileName'와 같이 작성 할 수 없습니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="변수 이름 명명 규칙" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                변수 명명 규칙입니다.
                <LineBreak/>
                <LineBreak/>
                1. <Run Text="대소문자 구분 없음"/>
                <LineBreak/>
                2. <Run Text="한글, 영어, 숫자, _(언더바)만 사용가능. (첫글자에도 동일하게 적용)"/>                
                <LineBreak/><LineBreak/>
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  참조 도움말  ]-->
    <Grid x:Key="ReferenceHelp">
        <StackPanel>
            <TextBlock Text="참조 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 PowerVBA에서의 참조에 대해서 설명합니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="참조 추가" FontSize="18"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                PowerVBA는 PowerPoint에서 미리 지정된 여러개의 리스트에서 선택해서 추가하는 것이 불가능합니다.<LineBreak/>
                단, 이미 추가된 참조와, 사용자의 컴퓨터에서 라이브러리를 찾아 추가할 수 있습니다.<LineBreak/><LineBreak/>
                
                위치는 다음과 같습니다. 메뉴의 [프로젝트] 탭에서 [구성 요소] 그룹에 있는 참조 추가 버튼을 눌러서 추가합니다. <LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/Ref1.jpg" Width="400"/><LineBreak/>
                
                
                TODO:미완성 이므로 다 완성한 후 추가할 것
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  기본 함수 추가/제거  ]-->
    <Grid x:Key="FunctionHelp">
        <StackPanel>
            <TextBlock Text="기본 함수 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 함수를 선언하고자 할때 사용합니다.
                함수는 값을 반환하는 함수, 값을 반환하지 않는 함수로 나뉘며
                값을 반환하는 함수는 반환할 형식을 지정해주어야 합니다. 반환할 기본 타입으로는 다음과 같은 형식이 있습니다.
                <LineBreak/><LineBreak/>
                - <Run Text="String" FontWeight="Bold"/> (문자열)<LineBreak/>
                - <Run Text="Boolean" FontWeight="Bold"/> (참 혹은 거짓)<LineBreak/>
                - <Run Text="Integer" FontWeight="Bold"/> (정수)<LineBreak/>
                - <Run Text="Object" FontWeight="Bold"/> (모든 형식을 담을 수 있음)<LineBreak/>
                - <Run Text="Variant" FontWeight="Bold"/> (모든 형식을 담을 수 있음)<LineBreak/>
                <LineBreak/>
                자세한 내용은 <Hyperlink TargetName="TypeHelp">VBA 형식</Hyperlink> 도움말 에서 확인하세요.
            </TextBlock>

            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                반환하지 않는 함수 선언의 기본은 다음과 같습니다.
            </TextBlock>
            <av:CodeEditor Margin="0,10" Text="Public Sub Name()&#x0a;&#x0a;End Sub" IsHitTestVisible="False" 
                           ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto"></av:CodeEditor>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                반환하는 함수 선언의 기본은 다음과 같습니다.
            </TextBlock>
            <av:CodeEditor Margin="0,10" Text="Public Function Name() As ReturnType&#x0a;&#x0a;End Function" IsHitTestVisible="False" 
                           ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto"></av:CodeEditor>

            <TextBlock TextWrapping="Wrap">
                다음은 반환하는 방법에 대해서 설명합니다. 반환은 기본적으로 <Run Text="함수이름 = 반환할 값" FontWeight="Bold"/>으로 반환합니다.
                VB.NET에서는 Return 키워드로 반환하지만 이곳에서의 Return은 다른 의미로 사용됩니다.
                <LineBreak/><LineBreak/>
            </TextBlock>

            <TextBlock>
                다음은 반환 예시입니다.
            </TextBlock>
            <av:CodeEditor Margin="0,10" Text="Public Function GetName(ByVal i As Integer) As String&#x0a;    If i = 1 Then&#x0a;        GetName = &quot;홍길동&quot;&#x0a;    ElseIf i = 2 Then&#x0a;        GetName = &quot;임꺽정&quot;&#x0a;    Else&#x0a;        GetName = &quot;알 수 없음&quot;&#x0a;    End If&#x0a;End Function&#x0a;&#x0a;Public Sub ShowName()&#x0a;    MsgBox &quot;저의 이름은 &quot; &amp; GetName(1) &amp; &quot; 입니다.&quot;&#x0a;End Sub" 
                           IsHitTestVisible="False" 
                           ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto"></av:CodeEditor>

            <TextBlock>
                다음은 실행 결과 입니다.
            </TextBlock>

            <Grid Margin="0,10,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBlock Text="실행 결과 >>" FontWeight="Bold" Margin="0,0,0,5"/>
                <Rectangle Grid.Row="1" Fill="LightGray" Stroke="Black"/>
                <TextBlock Grid.Row="1" Margin="10">
                    저의 이름은 홍길동 입니다.
                </TextBlock>
            </Grid>

        </StackPanel>

    </Grid>
    <!--#endregion-->

    <!--#region [  형식 설명  ]-->
    <Grid x:Key="TypeHelp">
        <StackPanel>
            <TextBlock Text="VBA 형식" FontSize="20"/>

            <TextBlock Margin="0,10,0,0">
                다음은 VBA의 형식에 대해서 설명합니다.<LineBreak/>
                VBA에서는 다음과 같은 형식들을 사용합니다.<LineBreak/><LineBreak/>
                - <Run Text="Integer" FontWeight="Bold"/> (정수형)<LineBreak/>
                정수형은 1, 2와 같은 소숫점이 없는 숫자를 나타내는 형식입니다.<LineBreak/><LineBreak/>
                - <Run Text="Double" FontWeight="Bold"/> (실수형)<LineBreak/>
                실수형은 1.23, 3.14와 같은 소숫점이 있는 숫자를 나타내는 형식입니다.<LineBreak/><LineBreak/>
                - <Run Text="String" FontWeight="Bold"/> (문자열)<LineBreak/>
                문자열은 문자를 나열한 데이터를 사용 할 수 있습니다.<LineBreak/><LineBreak/>
                - <Run Text="Boolean" FontWeight="Bold"/> (참/거짓|부울형)<LineBreak/>
                부울형은 True 또는 False와 같이 참과 거짓을 나타내는 형식입니다.<LineBreak/><LineBreak/>
                - <Run Text="Byte" FontWeight="Bold"/> (-128 ~ 127)<LineBreak/>
                Byte형은 -128 부터 127까지의 범위를 나타내는 형식입니다.<LineBreak/><LineBreak/>
                - <Run Text="Object" FontWeight="Bold"/> (모든 형)<LineBreak/>
                Object형은 모든 형식을 모두 커버 할 수 있는 형식입니다.<LineBreak/><LineBreak/>
                - <Run Text="Variant" FontWeight="Bold"/> (모든 형)<LineBreak/>
                Variant형은 모든 형식을 모두 커버 할 수 있는 형식입니다.<LineBreak/><LineBreak/>
                이 외에 사용자 지정 형식을 사용 할 수 있습니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    <!--#endregion-->

    <!--#region [  코드 에디터 기능 목록  ]-->

    <Grid x:Key="CodeEditorHelp">
        <StackPanel>
            <TextBlock Text="Code Editor 기능 목록" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                다음 도움말은 VBA의 코드 편집기인 Code Editor의 기능에 대해서 설명합니다.
                <LineBreak/><LineBreak/>
                PowerVBA는 기본적으로 ICSharpCode에서 개발한 'AvalonEdit' 컨트롤을 사용하고 있습니다.
                <LineBreak/><LineBreak/>
                기존 PowerPoint의 VBA Code Editor 보다 개선된 점은 다음과 같습니다.
                <LineBreak/><LineBreak/>
                - 하이라이팅되는 키워드의 수가 많아졌습니다.<LineBreak/>
                - 메소드의 시작과 끝을 인식해 폴딩(열고 닫는것)이 가능합니다.<LineBreak/>
                <!--- <Hyperlink TargetName="SelectHelp">While (VBA)</Hyperlink> 문<LineBreak/>-->
            </TextBlock>
            
            <TextBlock Text="메소드 폴딩" FontSize="20"/>

            <TextBlock Margin="0,10,0,0">
                <LineBreak/>
                메소드 폴딩이란 함수의 시작과 끝을 인식하여 왼쪽의 + 버튼을 통해서 접고 닫을 수 있는 기능입니다.
                <LineBreak/><LineBreak/>
                해당 기능을 사용하면 긴 코드를 줄여서 간단하게 표현할 수 있습니다.
                <LineBreak/>
                인식은 다음과 같이 합니다.
                <LineBreak/><LineBreak/>
                <Run Text="서브루틴" FontWeight="Bold"/> (값을 반환 하지 않는 함수),
                <Run Text="값을 반환 하는 함수" FontWeight="Bold"/>, 
                <Run Text="Property" FontWeight="Bold"/>등은 인식이 가능합니다.
            </TextBlock>

            <TextBlock Text="주석 폴딩" Margin="0,20,0,0" FontSize="20"/>
            
            <TextBlock Margin="0,10,0,0">
                주석은 다음과 같은 경우 폴딩 처리 됩니다.<LineBreak/><LineBreak/>
                - 전역에 위치한 주석<LineBreak/>
                - 2줄 이상인 주석 (빈칸 포함)<LineBreak/>
            </TextBlock>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->
    
    <!--#region [  PPT 차이점  ]-->

    <Grid x:Key="PPTDiffHelp">
        <StackPanel>
            <TextBlock Text="PowerVBA ↔ PowerPoint의 차이점" FontSize="20"/>

            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                <LineBreak/>
                이 도움말은 기본적으로 PowerVBA와 PowerPoint의 차이점에 대해 설명합니다.
                <LineBreak/><LineBreak/>
                해당 도움말을 익히면 경우에 따라 PowerPoint와 PowerVBA를 사용 할 수 있습니다.
                <LineBreak/><LineBreak/>
                PowerPoint는 <Run Text="Microsoft에서 만든 프레젠테이션용 도구" FontWeight="Bold"/>입니다. <LineBreak/>
                슬라이드에 효과를 넣고 도형과 텍스트로 프레젠테이션을 꾸밀 수 있습니다.<LineBreak/>
                파워포인트를 비롯한 대부분의 Office 제품에는 VBA(Visual Basic Application) 이라는 매크로용 언어가 내장되어 있습니다. 따라서, 해당 기능을 사용하면 좀 더 간단하게 일을 처리할 수 있습니다.<LineBreak/>
                대부분의 사람들은 파워포인트에서 VBA를 사용 하지 않습니다.<LineBreak/>
                <LineBreak/><LineBreak/>
                PowerVBA는 PowerPoint의 VBA를 쉽게 작성하기 위해 <Run Text="개인이 만든 도구" FontWeight="Bold"/>입니다.<LineBreak/>
                PowerPoint에서의 VBA 편집 도구에서 불편하거나 없는 기능들을 개선하여 나온 툴입니다.<LineBreak/>
                파워포인트에서 자체적으로 제공하는 PowerPoint 라이브러리를 사용하여 대부분의 기능을 구현하였습니다.<LineBreak/>
                PowerVBA는 PowerPoint에서 가능한 슬라이드 도형의 편집기능을 포함하고 있지 않습니다.<LineBreak/>
                실시간으로 코드의 문법적 오류를 확인할 수 있습니다.<LineBreak/>
                또한, PowerPoint와는 다른 자체 문법 분석 엔진을 도입하여 좀 더 자세히 오류에 대해 알려줍니다.
                (약 160개 정도의 오류를 확인 가능)
                
                <LineBreak/><LineBreak/>
                결론은 기본적인 프레젠테이션 작업을 할때는 PowerPoint가 훨씬 좋습니다.<LineBreak/>그러나 <Run Text="VBA 작업" FontWeight="Bold"/>을 할때에는 <Run Text="PowerVBA" FontWeight="Bold"/>를 사용하시면 더 편하게 VBA 코드를 짜실 수 있습니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->
    
    <!--#region [  미리 정의된 함수 도움말  ]-->

    <Grid x:Key="PreDecFuncHelp">
        <StackPanel>
            <TextBlock Text="미리 정의된 함수 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 PowerVBA의 미리 정의된 함수에 대해 설명합니다.
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="미리 정의된 함수" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                미리 정의된 함수란 자주 쓰이거나, 쓰긴 하는데 코드로 작성하기 힘든 부분들을 미리 만들어둔 함수 목록입니다.<LineBreak/>
                현재까지 만들어진 미리 정의된 함수들의 구분은 다음과 같습니다. (사실 모두 PowerVBA.bas 안에 속하지만 기능적으로 구분합니다.)
                <LineBreak/><LineBreak/>
                <Run Text="File" FontWeight="Bold"/> : 파일을 복사/이동/삭제 할 수 있게 도와주는 메소드 그룹입니다.<LineBreak/>
                <Run Text="MathEx" FontWeight="Bold"/> : Math에 정의되지 않은 여러가지 함수가 포함되어 있습니다.<LineBreak/>
                <Run Text="PPTHelper" FontWeight="Bold"/> : 슬라이드 추가/제거 등, 여러가지 프레젠테이션용 함수들이 포함되어 있습니다.<LineBreak/>
                <Run Text="Web" FontWeight="Bold"/> : 웹 소스 가져오기 함수가 포함되어 있습니다.<LineBreak/>
            </TextBlock>
            <TextBlock Margin="0,30,0,0" Text="PowerVBA에서 추가하기" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                해당 도움말은 PowerVBA의 미리 정의된 함수에 대해 설명합니다.<LineBreak/>
                TODO:해당 도움말 완성
            </TextBlock>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->
    
    
    <!--#region [  트리거 추가/제거  ]-->

    <Grid x:Key="TriggerHelp">
        <StackPanel>
            <TextBlock Text="트리거 추가/제거" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                파워포인트에서는 두 개의 트리거를 사용 할 수 있습니다.<LineBreak/><LineBreak/>
                <Run Text="마우스를 올렸을때 (PowerVBA에선 MouseOver로 칭함)" FontWeight="Bold"/><LineBreak/>
                <Run Text="마우스를 클릭했을때 (PowerVBA에선 MouseClick로 칭함)" FontWeight="Bold"/><LineBreak/>
                <LineBreak/>
                각각의 트리거는 PowerVBA의 트리거 추가/제거 기능으로 쉽고 빠르게 연결할 수 있습니다.<LineBreak/>

                <Image Source="/PowerVBA;component/Resources/HelpImages/trigger1.jpg" Width="600"/><LineBreak/>
                [삽입] 탭의 [트리거 삽입] 그룹의 [MouseOver 트리거 추가] 버튼을 통해 추가할 수 있습니다.
            </TextBlock>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->


    <!--#region [  코드 분석  ]-->

    <Grid x:Key="CodeAnalysisHelp">
        <StackPanel>
            <TextBlock Text="코드 분석" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                이 도움말은 코드 분석의 방법에 대해 소개합니다.<LineBreak/><LineBreak/>
                코드 분석은 현재 프레젠테이션에 있는 <Run Text="모든 파일" FontWeight="Bold"/>의 오류를 검사합니다.<LineBreak/>
                모든 파일의 검사를 수행하나, 다음의 조건이 존재합니다.<LineBreak/><LineBreak/>
                
                - 저장되지 않은 파일의 내용은 오류 검사하지 않습니다. <LineBreak/>
                - 모든 파일을 대상으로 코드 파싱을 해 오류와 경고를 나타냅니다.<LineBreak/>
                
                <LineBreak/>
                코드 분석 결과는 다음 화면에 표시됩니다.
                
                <Image Source="/PowerVBA;component/Resources/HelpImages/FileAnalysis1.jpg" Width="700"/><LineBreak/>
                확인한 파일 개수는 모든 파일의 개수를 의미합니다.<LineBreak/>
                오류 + 경고는 오류와 경고의 개수를 합친것을 의미합니다.<LineBreak/>
                오류는 '오류 + 경고'중 오류의 개수를 의미합니다.<LineBreak/>
                경고는 '오류 + 경고'중 경고의 개수를 의미합니다.<LineBreak/>
            </TextBlock>
        </StackPanel>
    </Grid>

    <!--#endregion-->

    <!--#region [  도형 탐색기  ]-->

    <Grid x:Key="ShapeExplorerHelp">
        <StackPanel>
            <TextBlock Text="도형 탐색기" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                이 도움말은 도형 탐색기에 대해서 알려줍니다.<LineBreak/><LineBreak/>
                도형 탐색기는 슬라이드 내의 도형의 정보를 가져옵니다.<LineBreak/>
            </TextBlock>
            <TextBlock Text="도형 탐색기 활용" Margin="0,20,0,0" FontSize="20"/>
            <TextBlock Margin="0,10,0,0" TextWrapping="Wrap">
                도형 탐색기에서는 도형의 이름, 타입 등 여러가지 정보를 출력합니다.<LineBreak/>
                VBA 작업에 도움이 될 수 있습니다.<LineBreak/><LineBreak/>
                사용은 다음과 같습니다.<LineBreak/>
                <Image Source="/PowerVBA;component/Resources/HelpImages/ShapeExplorer1.png" Width="250"/>
                화면의 오른쪽에 있는 솔루션 탐색기에서 [도형 탐색기]를 클릭합니다.<LineBreak/>
            </TextBlock>
        </StackPanel>
    </Grid>
    
    <!--#endregion-->
</ResourceDictionary>
